name: 🚀 うちのきろく Deploy

on:
  push:
    branches: [main]
  workflow_run:
    workflows: ["🏠 うちのきろく CI"]
    types: [completed]
    branches: [main]

env:
  NODE_VERSION: '18'
  VPS_HOST: '160.251.136.92'
  VPS_USER: 'root'
  APP_PATH: '/var/www/uchi'

jobs:
  deploy:
    name: 🚀 Deploy to VPS
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔐 Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.VPS_HOST }} >> ~/.ssh/known_hosts
          
      - name: 🧹 Pre-deployment cleanup
        run: |
          ssh ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
            cd ${{ env.APP_PATH }}
            echo '🧹 Stopping existing processes...'
            pkill -f 'next-server' || true
            pkill -f 'npm run dev' || true
            sleep 3
          "
          
      - name: 📥 Pull latest code
        run: |
          ssh ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
            cd ${{ env.APP_PATH }}
            echo '📥 Pulling latest code...'
            git fetch origin
            git reset --hard origin/main
            git clean -fd
          "
          
      - name: 📋 Install dependencies
        run: |
          ssh ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
            cd ${{ env.APP_PATH }}
            echo '📋 Installing dependencies...'
            npm ci --only=production
          "
          
      - name: 🗄️ Database operations
        run: |
          ssh ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
            cd ${{ env.APP_PATH }}
            echo '🗄️ Updating database...'
            npx prisma generate
            npx prisma db push --accept-data-loss || true
          "
          
      - name: 🏗️ Build application
        run: |
          ssh ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
            cd ${{ env.APP_PATH }}
            echo '🏗️ Building application...'
            npm run build
          "
          
      - name: 🚀 Start application
        run: |
          ssh ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
            cd ${{ env.APP_PATH }}
            echo '🚀 Starting application...'
            nohup ./start-with-env.sh > deploy.log 2>&1 &
            sleep 10
          "
          
      - name: ✅ Health check
        run: |
          echo '✅ Performing health check...'
          for i in {1..6}; do
            if curl -f -s https://uchinokiroku.com > /dev/null; then
              echo "✅ Health check passed (attempt $i)"
              break
            else
              echo "⏳ Waiting for application to start (attempt $i/6)..."
              sleep 10
            fi
            if [ $i -eq 6 ]; then
              echo "❌ Health check failed after 6 attempts"
              ssh ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
                cd ${{ env.APP_PATH }}
                echo '📋 Application logs:'
                tail -50 deploy.log
              "
              exit 1
            fi
          done
          
      - name: 📊 Deployment summary
        if: always()
        run: |
          ssh ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
            cd ${{ env.APP_PATH }}
            echo '📊 Deployment Summary:'
            echo 'Git Status:'
            git log -1 --oneline
            echo 'Process Status:'
            ps aux | grep -E '(next|npm)' | grep -v grep || echo 'No processes found'
            echo 'Latest logs:'
            tail -20 deploy.log 2>/dev/null || echo 'No deploy log found'
          "

  notify:
    name: 📢 Notify deployment result
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
      - name: 🎉 Success notification
        if: needs.deploy.result == 'success'
        run: |
          echo "🎉 Deployment successful!"
          echo "✅ Site: https://uchinokiroku.com"
          echo "📝 Commit: ${{ github.sha }}"
          
      - name: ❌ Failure notification  
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          echo "📝 Commit: ${{ github.sha }}"
          echo "🔍 Check logs for details"